{
  "version": "https://jsonfeed.org/version/1",
  "title": "Aryan's Journal",
  "home_page_url": "http://localhost:1313/",
  "feed_url": "http://localhost:1313/feed.json",
  "description": "Random bits and bytes from Aryan's Journey",
  "favicon": "http://localhost:1313//assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Aryan Ahmed",
    "url": "http://localhost:1313/"
  },
  "items": [
    
    

    
    {
      "id": "1b40bbae3654d66d22e807996fb1f162292033a2",
      "title": "Differences Between Ssl and Tls",
      "summary": "",
      "content_text": "While they serve a similar purpose, they are not quite the same. In this article, we’ll delve into the differences between SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols.\nIn the world of online security, SSL and TLS are two terms that often come up when discussing encrypted communication. They both play a crucial role in ensuring that our sensitive data remains safe while traversing the vast expanses of the internet. While they serve a similar purpose, they are not quite the same. In this article, we\u0026rsquo;ll delve into the differences between SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols.\nEvolution and Origins SSL, the pioneer in secure communication, emerged in the 1990s as a response to the need for encrypted data transmission over networks. It went through several iterations, from SSL 1.0 to SSL 3.0. However, it wasn\u0026rsquo;t long before security vulnerabilities were discovered in SSL 2.0 and 3.0, leading to the need for a more robust solution.\nEnter TLS. Transport Layer Security, or TLS, can be seen as the next step in the evolution of secure communication. TLS 1.0 was designed to address the shortcomings of SSL and build upon its foundations to offer improved security measures.\nFocus on Security One of the significant differences between SSL and TLS lies in their approach to security. While both protocols employ cryptographic techniques to encrypt data, TLS was developed with a greater emphasis on security. The vulnerabilities found in SSL versions prompted developers to rethink and enhance the security mechanisms for data protection.\nTLS has undergone more extensive scrutiny and has benefited from lessons learned from SSL\u0026rsquo;s vulnerabilities. This increased focus on security translates into a more secure and robust protocol for safeguarding sensitive information.\nVersion Numbers Another key distinction between SSL and TLS is the version numbers of the protocols. SSL\u0026rsquo;s iterations include SSL 1.0, SSL 2.0, and SSL 3.0. However, due to vulnerabilities and weaknesses found in SSL 2.0 and 3.0, these versions are now considered deprecated and insecure for use.\nTLS, on the other hand, has a series of versions that have progressively improved security measures. These versions include TLS 1.0, TLS 1.1, TLS 1.2, and TLS 1.3. Each version has introduced stronger encryption algorithms, enhanced key exchange methods, and improved security features, ensuring a higher level of protection for online communication.\nCompatibility and Usage As the security landscape evolved, TLS gained wider acceptance as the go-to protocol for secure communication. Modern web browsers and applications prioritize the use of TLS over SSL due to its enhanced security features. This shift has led to increased compatibility and support for TLS across a variety of devices and platforms.\nIn contrast, due to the known vulnerabilities and security flaws, SSL is largely deprecated and discouraged for use in contemporary systems. Many websites and services have transitioned to using TLS exclusively to ensure the highest level of security for their users.\nBottom line In the ever-evolving landscape of online security, SSL and TLS have played vital roles in ensuring the confidentiality and integrity of data during transmission. While SSL paved the way, TLS emerged as the more secure and advanced protocol, addressing the shortcomings of its predecessor and introducing stronger security measures. As we continue to navigate the digital realm, understanding the differences between SSL and TLS empowers us to make informed decisions about the security of our online interactions.\n",
      "content_html": "\u003cp\u003eWhile they serve a similar purpose, they are not quite the same. In this article, we’ll delve into the differences between SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols.\u003c/p\u003e\n\u003cp\u003eIn the world of online security, SSL and TLS are two terms that often come up when discussing encrypted communication. They both play a crucial role in ensuring that our sensitive data remains safe while traversing the vast expanses of the internet. While they serve a similar purpose, they are not quite the same. In this article, we\u0026rsquo;ll delve into the differences between SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols.\u003c/p\u003e\n\u003ch2 id=\"evolution-and-origins\"\u003eEvolution and Origins\u003c/h2\u003e\n\u003cp\u003eSSL, the pioneer in secure communication, emerged in the 1990s as a response to the need for encrypted data transmission over networks. It went through several iterations, from SSL 1.0 to SSL 3.0. However, it wasn\u0026rsquo;t long before security vulnerabilities were discovered in SSL 2.0 and 3.0, leading to the need for a more robust solution.\u003c/p\u003e\n\u003cp\u003eEnter TLS. Transport Layer Security, or TLS, can be seen as the next step in the evolution of secure communication. TLS 1.0 was designed to address the shortcomings of SSL and build upon its foundations to offer improved security measures.\u003c/p\u003e\n\u003ch2 id=\"focus-on-security\"\u003eFocus on Security\u003c/h2\u003e\n\u003cp\u003eOne of the significant differences between SSL and TLS lies in their approach to security. While both protocols employ cryptographic techniques to encrypt data, TLS was developed with a greater emphasis on security. The vulnerabilities found in SSL versions prompted developers to rethink and enhance the security mechanisms for data protection.\u003c/p\u003e\n\u003cp\u003eTLS has undergone more extensive scrutiny and has benefited from lessons learned from SSL\u0026rsquo;s vulnerabilities. This increased focus on security translates into a more secure and robust protocol for safeguarding sensitive information.\u003c/p\u003e\n\u003ch2 id=\"version-numbers\"\u003eVersion Numbers\u003c/h2\u003e\n\u003cp\u003eAnother key distinction between SSL and TLS is the version numbers of the protocols. SSL\u0026rsquo;s iterations include SSL 1.0, SSL 2.0, and SSL 3.0. However, due to vulnerabilities and weaknesses found in SSL 2.0 and 3.0, these versions are now considered deprecated and insecure for use.\u003c/p\u003e\n\u003cp\u003eTLS, on the other hand, has a series of versions that have progressively improved security measures. These versions include TLS 1.0, TLS 1.1, TLS 1.2, and TLS 1.3. Each version has introduced stronger encryption algorithms, enhanced key exchange methods, and improved security features, ensuring a higher level of protection for online communication.\u003c/p\u003e\n\u003ch2 id=\"compatibility-and-usage\"\u003eCompatibility and Usage\u003c/h2\u003e\n\u003cp\u003eAs the security landscape evolved, TLS gained wider acceptance as the go-to protocol for secure communication. Modern web browsers and applications prioritize the use of TLS over SSL due to its enhanced security features. This shift has led to increased compatibility and support for TLS across a variety of devices and platforms.\u003c/p\u003e\n\u003cp\u003eIn contrast, due to the known vulnerabilities and security flaws, SSL is largely deprecated and discouraged for use in contemporary systems. Many websites and services have transitioned to using TLS exclusively to ensure the highest level of security for their users.\u003c/p\u003e\n\u003ch2 id=\"bottom-line\"\u003eBottom line\u003c/h2\u003e\n\u003cp\u003eIn the ever-evolving landscape of online security, SSL and TLS have played vital roles in ensuring the confidentiality and integrity of data during transmission. While SSL paved the way, TLS emerged as the more secure and advanced protocol, addressing the shortcomings of its predecessor and introducing stronger security measures. As we continue to navigate the digital realm, understanding the differences between SSL and TLS empowers us to make informed decisions about the security of our online interactions.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/differences-between-ssl-and-tls/",
      "date_published": "25106-25-09T1048:2525:00+01:00",
      "date_modified": "25106-25-09T1048:2525:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "7b7ea7b2cfa05b82084f59deba7659e5b566aef1",
      "title": "Dynamic Trait to a Concrete Type in Rust",
      "summary": "",
      "content_text": "As rust does not support interface , sometimes it can be difficult to cast a dynamic typed variable to a concrete type. Lets take a look how we can achieve similar functionality.\nEvery value in Rust is of a certain data type. Even null and errors are handled differently. In fact rust doesn’t have null. Null values are handled via the Option type and errors are handled via Result type. Every struct we define has specific values as well.\nWhat happens we need something dynamic of different types?\nContext I’m trying to build a storage library, that supports multiple drivers. Sort of like laravel’s storage class. In my design, we’d have something like\nStorage::put('file-01.txt', content); Storage::disk('s3')-\u0026gt;put('file-02.png', content); Storage::download('file-03.docs'); As it’ll have different types of disks, which will work as adapters to our storage.\nThe problem The problem I was facing was having different config files for each type of disks. Our LocalFileAdapter , S3BucketFileAdapater , FTPFileAdapter each will have different type of config files. Simply put, S3BucketFileAdapater will have public key ,secret key and bucket name. LocalFileAdapater will not need these.\nSketching Now, I want to have a method something similar to Storage::new(config) or something like this. The config should have which adapter/s to use, with their appropriate configuration (and unique) values.\nTwo cfgs For better understanding, I’m paining two config structs.\npub struct LocalFileSystemAdapterConfig { pub root_dir: String, } pub struct S3AdapterConfig { pub public_key: String, pub secret_key: String, pub bucket: String, pub use_path_style_endpoint: false, } And I need something like\ntrait StorageAdapter { // ... methods } struct Storage { disk: StorageAdapter, // other props } let storage = Storage::from(LocalFileSystemAdapterConfig | S3AdapterConfig); // and based on the given config storage.disk = LocalFileSystem | S3 Defining a function that takes a dynamic parameter and casts it down to a specific / concrete type. The initial thought was maybe we should have something like\nstruct LocalAdapterConfig { base_dir: String, } impl LocalAdapter { pub fn new\u0026lt;T : dyn StorageAdapterConfigTrait\u0026gt;(config: T) -\u0026gt; LocalAdapter { let local_config = config as LocalAdapterConfig; // THIS IS NOT ALLOWED } } The attempt resulted in a failure and gave me:\n... an `as` expression can only be used to convert between primitive types Rust is saying, you can use the as keyword to convert between primitive types. This was not working. But as we are using a dynamictrait (as an interface concept). We can cast that trait to a concrete type.\nSolution: Downcast In this case, our config: T would be converted to LocalAdapterConfig. Though the method signature needs to change a bit.\nWe want to use the Any trait, it uses reflection to allow dynamic typing of any \u0026lsquo;static type.\nDowncasting is converting a trait into a concrete type.\nOur initial code is as follows\nuse std::any::Any; pub struct LocalFileSystemAdapterConfig { pub base_directory: String, } pub struct LocalFileSystemAdapter { pub base_dir: String, // just for demo purpose } // the trait config that every storage adapter's config will implement pub trait StorageAdapterConfig { fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any; } We need the as_any method to be implemented for concrete struct/s where we want to allow downcasting. Therefore,\nuse std::any::Any; impl StorageAdapterConfig for LocalFileSystemAdapterConfig { fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any { self } } We also need to change our method’s signature from\npub fn new\u0026lt;T : dyn StorageAdapterConfigTrait\u0026gt;(config: T) to\npub fn new(config: \u0026amp;dyn Any) // make sure to import std::any::Any; And finally, to downcast a variable of type dyn Any to our concrete LocalFileSystemAdapterConfig ,\nlet cfg : \u0026amp;LocalFileSystemAdapterConfig = config .downcast_ref::\u0026lt;LocalFileSystemAdapterConfig\u0026gt;() .expect(\u0026quot;failed to downcast\u0026quot;); // the syntax is // .downcast_ref::\u0026lt;$CONCRETE_TYPE\u0026gt;().expect(\u0026quot;msg\u0026quot;); The full code,\nimpl LocalFileSystemAdapter { pub fn new(config: \u0026amp;dyn Any) -\u0026gt; LocalFileSystemAdapter { let cfg : \u0026amp;LocalFileSystemAdapterConfig = config .downcast_ref::\u0026lt;LocalFileSystemAdapterConfig\u0026gt;() .expect(\u0026quot;failed to downcast\u0026quot;); let base_dir = \u0026amp;cfg.base_directory; LocalFileSystemAdapter { base_dir: base_dir.to_string(), } } // ... } Our IDE picks up the change and returns proper intellisense.\n***Note *maybe there are better ways of achieving the same result, maybe the API Design could have been better to avoid it in the first place. Well, I’m still learning rust.\nFound a mistake? Feel free to point it out.\n",
      "content_html": "\u003cp\u003eAs rust does not support interface , sometimes it can be difficult to cast a dynamic typed variable to a concrete type. Lets take a look how we can achieve similar functionality.\u003c/p\u003e\n\u003cp\u003eEvery value in Rust is of a certain \u003cem\u003edata type\u003c/em\u003e. Even null and errors are handled differently. In fact rust doesn’t have null. Null values are handled via the Option type and errors are handled via Result type. Every struct we define has specific values as well.\u003c/p\u003e\n\u003cp\u003eWhat happens we need something dynamic of different types?\u003c/p\u003e\n\u003ch2 id=\"context\"\u003eContext\u003c/h2\u003e\n\u003cp\u003eI’m trying to build a storage library, that supports multiple drivers. Sort of like \u003ca href=\"https://laravel.com/docs/9.x/filesystem\"\u003elaravel’s storage\u003c/a\u003e class. In my design, we’d have something like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStorage::put('file-01.txt', content);\n\nStorage::disk('s3')-\u0026gt;put('file-02.png', content);\n\nStorage::download('file-03.docs');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs it’ll have different types of disks, which will work as adapters to our storage.\u003c/p\u003e\n\u003ch2 id=\"the-problem\"\u003eThe problem\u003c/h2\u003e\n\u003cp\u003eThe problem I was facing was having different config files for each type of disks. Our LocalFileAdapter , S3BucketFileAdapater , FTPFileAdapter each will have different type of config files. Simply put, S3BucketFileAdapater will have public key ,secret key and bucket name. LocalFileAdapater will not need these.\u003c/p\u003e\n\u003ch3 id=\"sketching\"\u003eSketching\u003c/h3\u003e\n\u003cp\u003eNow, I want to have a method something similar to Storage::new(config) or something like this. The config should have which adapter/s to use, with their appropriate configuration (and unique) values.\u003c/p\u003e\n\u003ch3 id=\"two-cfgs\"\u003eTwo cfgs\u003c/h3\u003e\n\u003cp\u003eFor better understanding, I’m paining two config structs.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epub struct LocalFileSystemAdapterConfig {\n  pub root_dir: String,\n}\n\npub struct S3AdapterConfig {\n  pub public_key: String,\n  pub secret_key: String,\n  pub bucket: String,\n  pub use_path_style_endpoint: false,\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd I need something like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrait StorageAdapter {\n  // ... methods\n}\nstruct Storage {\n  disk: StorageAdapter,\n  // other props\n}\n\nlet storage = Storage::from(LocalFileSystemAdapterConfig | S3AdapterConfig);\n\n// and based on the given config\nstorage.disk = LocalFileSystem | S3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDefining a function that takes a dynamic parameter and casts it down to a specific / concrete type. The initial thought was maybe we should have something like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estruct LocalAdapterConfig {\n  base_dir: String,\n}\n\nimpl LocalAdapter {\n  pub fn new\u0026lt;T : dyn StorageAdapterConfigTrait\u0026gt;(config: T) -\u0026gt; LocalAdapter {\n    let local_config = config as LocalAdapterConfig;\n    // THIS IS NOT ALLOWED\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe attempt resulted in a failure and gave me:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e... an `as` expression can only be used to convert between primitive types\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRust is saying, you can use the as keyword to convert between primitive types. This was not working. But as we are using a dynamictrait (as an interface concept). We can cast that trait to a concrete type.\u003c/p\u003e\n\u003ch2 id=\"solution-downcast\"\u003eSolution: Downcast\u003c/h2\u003e\n\u003cp\u003eIn this case, our config: T would be converted to LocalAdapterConfig. Though the method signature needs to change a bit.\u003c/p\u003e\n\u003cp\u003eWe want to use the Any trait, it uses reflection to allow dynamic typing of any \u0026lsquo;static type.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDowncasting is converting a trait into a concrete type.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eOur initial code is as follows\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euse std::any::Any;\n\npub struct LocalFileSystemAdapterConfig {\n    pub base_directory: String,\n}\n\npub struct LocalFileSystemAdapter {\n  pub base_dir: String, // just for demo purpose\n}\n\n// the trait config that every storage adapter's config will implement\npub trait StorageAdapterConfig {\n    fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need the as_any method to be implemented for concrete struct/s where we want to allow \u003cem\u003edowncasting\u003c/em\u003e. Therefore,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euse std::any::Any;\n\nimpl StorageAdapterConfig for LocalFileSystemAdapterConfig {\n    fn as_any(\u0026amp;self) -\u0026gt; \u0026amp;dyn Any {\n        self\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe also need to change our method’s signature from\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epub fn new\u0026lt;T : dyn StorageAdapterConfigTrait\u0026gt;(config: T)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eto\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epub fn new(config: \u0026amp;dyn Any)\n\n// make sure to import std::any::Any;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd finally, to downcast a variable of type dyn Any to our concrete LocalFileSystemAdapterConfig ,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet cfg : \u0026amp;LocalFileSystemAdapterConfig = config\n            .downcast_ref::\u0026lt;LocalFileSystemAdapterConfig\u0026gt;()\n            .expect(\u0026quot;failed to downcast\u0026quot;);\n\n// the syntax is\n// .downcast_ref::\u0026lt;$CONCRETE_TYPE\u0026gt;().expect(\u0026quot;msg\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe full code,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimpl LocalFileSystemAdapter {\n\n    pub fn new(config: \u0026amp;dyn Any) -\u0026gt; LocalFileSystemAdapter {\n\n        let cfg : \u0026amp;LocalFileSystemAdapterConfig = config\n            .downcast_ref::\u0026lt;LocalFileSystemAdapterConfig\u0026gt;()\n            .expect(\u0026quot;failed to downcast\u0026quot;);\n\n        let base_dir = \u0026amp;cfg.base_directory;\n\n        LocalFileSystemAdapter {\n            base_dir: base_dir.to_string(),\n        }\n    }\n\n  // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur IDE picks up the change and returns proper intellisense.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"https://cdn-images-1.medium.com/max/3676/1*Wc_P7YRnKepKZIwN-e-zlA.png\"\n  alt=\"Downcasting a dyn trait to a concrete type\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003e***Note *\u003cem\u003emaybe there are better ways of achieving the same result, maybe the API Design could have been better to avoid it in the first place. Well, I’m still learning rust.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFound a mistake? Feel free to point it out.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/dynamic-trait-to-a-concrete-type-in-rust/",
      "date_published": "17106-17-09T1048:1717:00+01:00",
      "date_modified": "17106-17-09T1048:1717:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "1b170eee144075fb6537f0016ee6e84829c53e56",
      "title": "Choosing the Right String Type in Rust a Journey of a Novice",
      "summary": "",
      "content_text": "Rust has been a favorite. While doing so, I’ve come across various scenarios where choosing the right string type can significantly impact both performance and code maintainability. In this blog post, I’ll share some insights into when to use different string types in Rust, based on real-world use cases.\nString The String type in Rust is a growable, heap-allocated, UTF-8 encoded string. It\u0026rsquo;s your go-to choice for most cases. Use String when:\nYou need a dynamically resizable string. You want to manipulate and modify the string frequently. UTF-8 encoding is essential for your application (most common use case). Example:\nlet my_string = String::from(\u0026#34;Hello, Rust!\u0026#34;); \u0026amp;str The \u0026amp;str type, often called a \u0026ldquo;string slice,\u0026rdquo; represents a borrowed reference to a string. Use \u0026amp;str when:\nYou need to work with string slices from existing data. You want to avoid heap allocation. Your function should accept string arguments without taking ownership. Example:\nfn print_greeting(greeting: \u0026amp;str) { println!(\u0026#34;{}\u0026#34;, greeting); } Cow The Cow (short for \u0026ldquo;clone on write\u0026rdquo;) type is versatile. It can be either a borrowed reference (\u0026amp;str) or an owned String, depending on the situation. Use Cow\u0026lt;str\u0026gt; when:\nYour function should accept both static and dynamic strings. You want to minimize unnecessary cloning. You need to balance performance and flexibility. Example:\nuse std::borrow::Cow; fn process_text(text: Cow\u0026lt;str\u0026gt;) { // ... } OsString and OsStr These types deal with platform-specific strings. Use OsString and OsStr when:\nYou\u0026rsquo;re working with file paths or environment variables that need to be compatible with the underlying OS. You need to handle non-UTF-8 encoded data (e.g., on Windows). Example:\nuse std::ffi::{OsString, OsStr}; fn read_file(file_path: \u0026amp;OsStr) -\u0026gt; Result\u0026lt;OsString, std::io::Error\u0026gt; { // ... } In conclusion, choosing the right string type in Rust is crucial for writing efficient and maintainable code. The decision largely depends on your specific use case, whether you need dynamic growth, want to avoid allocations, or deal with platform-specific data.\nFrom this journey, I\u0026rsquo;ve found that understanding the nuances of these string types is invaluable for crafting robust and performant Rust applications. Happy coding, Rustaceans!\n",
      "content_html": "\u003cp\u003eRust has been a favorite. While doing so, I’ve come across various scenarios where choosing the right string type can significantly impact both performance and code maintainability. In this blog post, I’ll share some insights into when to use different string types in Rust, based on real-world use cases.\u003c/p\u003e\n\u003ch2 id=\"string\"\u003eString\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eString\u003c/code\u003e type in Rust is a growable, heap-allocated, UTF-8 encoded string. It\u0026rsquo;s your go-to choice for most cases. Use \u003ccode\u003eString\u003c/code\u003e when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou need a dynamically resizable string.\u003c/li\u003e\n\u003cli\u003eYou want to manipulate and modify the string frequently.\u003c/li\u003e\n\u003cli\u003eUTF-8 encoding is essential for your application (most common use case).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003emy_string\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello, Rust!\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"str\"\u003e\u0026amp;str\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026amp;str\u003c/code\u003e type, often called a \u0026ldquo;string slice,\u0026rdquo; represents a borrowed reference to a string. Use \u003ccode\u003e\u0026amp;str\u003c/code\u003e when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou need to work with string slices from existing data.\u003c/li\u003e\n\u003cli\u003eYou want to avoid heap allocation.\u003c/li\u003e\n\u003cli\u003eYour function should accept string arguments without taking ownership.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eprint_greeting\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003egreeting\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003egreeting\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"cowstr\"\u003eCow\u003cstr\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eCow\u003c/code\u003e (short for \u0026ldquo;clone on write\u0026rdquo;) type is versatile. It can be either a borrowed reference (\u003ccode\u003e\u0026amp;str\u003c/code\u003e) or an owned \u003ccode\u003eString\u003c/code\u003e, depending on the situation. Use \u003ccode\u003eCow\u0026lt;str\u0026gt;\u003c/code\u003e when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYour function should accept both static and dynamic strings.\u003c/li\u003e\n\u003cli\u003eYou want to minimize unnecessary cloning.\u003c/li\u003e\n\u003cli\u003eYou need to balance performance and flexibility.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#111\"\u003estd\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eborrow\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eCow\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eprocess_text\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003etext\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eCow\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"osstring-and-osstr\"\u003eOsString and OsStr\u003c/h2\u003e\n\u003cp\u003eThese types deal with platform-specific strings. Use \u003ccode\u003eOsString\u003c/code\u003e and \u003ccode\u003eOsStr\u003c/code\u003e when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou\u0026rsquo;re working with file paths or environment variables that need to be compatible with the underlying OS.\u003c/li\u003e\n\u003cli\u003eYou need to handle non-UTF-8 encoded data (e.g., on Windows).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#111\"\u003estd\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003effi\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eOsString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eOsStr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eread_file\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003efile_path\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#75af00\"\u003eOsStr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eOsString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003estd\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eio\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eError\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn conclusion, choosing the right string type in Rust is crucial for writing efficient and maintainable code. The decision largely depends on your specific use case, whether you need dynamic growth, want to avoid allocations, or deal with platform-specific data.\u003c/p\u003e\n\u003cp\u003eFrom this journey, I\u0026rsquo;ve found that understanding the nuances of these string types is invaluable for crafting robust and performant Rust applications. Happy coding, Rustaceans!\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/choosing-the-right-string-type-in-rust-a-journey-of-a-novice/",
      "date_published": "1096-01-09T947:11:00+01:00",
      "date_modified": "1096-01-09T947:11:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "f67fe386545cb5bbca7f8e0f01292cf3d211a166",
      "title": "Prepared Statements in Sql",
      "summary": "",
      "content_text": " Prepared statements are a common thing sql world. It has many benefits like it can execute the same (or similar) SQL statements repeatedly with high efficiency. It can also prevent one of the biggest security vulnerabilities, SQL injection.\nCompared to executing the query directly, there are primarily 3 advantages. Taking these points from w3schools,\nPrepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times).\nBound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query. At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values.\nPrepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.\nSQL Injections During an SQL injection attack, the attacker tries to bind malicious sql code with the input parameter. In earlier days, we saw http queries like user?id=1, the id would be an input for the id of the users table. Behind the scene, the backend code is doing making some query using that input.\nImagine we want to just read the user data from database where the id is $id (from query param). Our sql query would translate to something like this\nSELECT (coulmns…) FROM users WHERE id = 1; But what if the the attacker used the following instead of the id\nuser?id=1;DROP TABLE users; As HTTP requests are parsed as strings (primarily), though we want id to be numeric, without proper sanitization the query would be\nSELECT (coulmns…) FROM users WHERE id = 1; DROP TABLE users; And given that there is sufficient permissions, this query would execute and drop the users table; A permanent mutation.\nPrepared Statements This can be prevented by using prepared statements. The root cause of that problem was not separating the sql code and input data. And the query and the data are sent to the database server separately.\nUsing prepared statements, we’ll have something like\nSELECT (columns…) FROM users where id=?\u0026quot; and data would be **1**;\nAs our SQL query is a valid program as of itself, if we are directly making a query, we are dynamically building the query aka program in the runtime and sending it to the sql server, but using prepared statements, we first send the query *SELECT (columns…) FROM users where id=?”* first. And thats our program.\nNow, this program needs 1 (id=?) parameter in this example. Now we send the second piece, our data is $data=1;\nIn this approach, our core SQL program (the query) can not be altered, the second request is only feeding the data itself.\nCommand vs Data Or to execute or not to. So what happens if we still use the same input ?id=1;DROP TABLE users; ? Well, the input is not parsed, neither executed. Imagine having an executable but not executing it.\nLets take a look at the following code,\n$data = \u0026quot;1; DROP TABLE users;\u0026quot; $db-\u0026gt;prepare(\u0026quot;SELECT (columns…) FROM users WHERE id=?\u0026quot;); $db-\u0026gt;execute($data); Shouldn’t this also translate to the same query? Well, the answer is no. AS mentioned, the query is a command that is executed, the data is not. For our instance, the data *1; DROP Table users* would fail to find a valid result.\nHere are some scenarios,\nIf we have proper constraints and imagine the id column is numeric (eg int) the query should not return any results because *1;DROP TABLE users;* is not a numeric value and not compareable.\nIf we don’t have proper constraints and id is not numeric either. Say its a text field well, its used as value and the query translate to something like *SELECT (columns…) FROM users WHERE id=”1; DROP TABLE users”;*. The *1; DROP TABLE users”;* portion is the data. In direct queries and sql injections, this would translate to *1* being the data and the later part would be a query, acting as data but also being executed, causing the injection.\nIf its a write query in this scenario, given its numeric, it’ll cause an error because that payload is not a numeric value, and if it’s a text field, it will be inserted in the field. In summary, it will behave according to the constraints but WILL NOT EXECUTE.\nBut either way, whether we get the results or not (with invalid inputs), and maybe the input was not sanitized, but not getting any results are not an vulnerability.\nSimple, yet amazing, is it not?\nFeel free to point out any mistakes I’ve made.\n",
      "content_html": "\u003cp\u003e\u003cimg\n  src=\"https://cdn-images-1.medium.com/max/2000/1*tmEFJ0LreB8wabdi67XY-Q.jpeg\"\n  alt=\"\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePrepared statement\u003c/strong\u003es are a common thing sql world. It has many benefits like it can execute the same (or similar) SQL statements repeatedly with high efficiency. It can also prevent one of the biggest security vulnerabilities, \u003cstrong\u003eSQL injection\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eCompared to executing the query directly, there are primarily 3 advantages. Taking these points from w3schools,\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003ePrepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query. At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePrepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"sql-injections\"\u003eSQL Injections\u003c/h3\u003e\n\u003cp\u003eDuring an SQL injection attack, the attacker tries to bind malicious sql code with the input parameter. In earlier days, we saw http queries like \u003ccode\u003euser?id=1\u003c/code\u003e, the id would be an input for the \u003ccode\u003eid\u003c/code\u003e of the users table. Behind the scene, the backend code is doing making some query using that input.\u003c/p\u003e\n\u003cp\u003eImagine we want to just read the user data from database where the id is $id (from query param). Our sql query would translate to something like this\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT (coulmns…) FROM users WHERE id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut what if the the attacker used the following instead of the id\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euser?id=1;DROP TABLE users;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs HTTP requests are parsed as strings (primarily), though we want id to be numeric, without proper sanitization the query would be\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT (coulmns…) FROM users WHERE id = 1; DROP TABLE users;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd given that there is sufficient permissions, this query would execute and drop the users table; A permanent mutation.\u003c/p\u003e\n\u003ch3 id=\"prepared-statements\"\u003ePrepared Statements\u003c/h3\u003e\n\u003cp\u003eThis can be prevented by using \u003ccode\u003eprepared statement\u003c/code\u003es. The root cause of that problem was not separating the sql code and input data. And \u003cstrong\u003ethe query and the data are sent to the database server separately\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eUsing prepared statements, we’ll have something like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT (columns…) FROM users where id=?\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand data would be \u003ccode\u003e**1**\u003c/code\u003e;\u003c/p\u003e\n\u003cp\u003eAs our SQL query is \u003cstrong\u003ea valid program as of itself\u003c/strong\u003e, if we are directly making a query, we are dynamically building the query aka \u003cem\u003eprogram\u003c/em\u003e in the runtime and sending it to the sql server, but using prepared statements, we first send the query \u003ccode\u003e*SELECT (columns…) FROM users where id=?”*\u003c/code\u003e first. And thats our program.\u003c/p\u003e\n\u003cp\u003eNow, this program needs 1 (\u003cem\u003eid=?\u003c/em\u003e) parameter in this example. Now we send the second piece, our data is \u003cem\u003e$data=1\u003c/em\u003e;\u003c/p\u003e\n\u003cp\u003eIn this approach, our core SQL program (the query) can not be altered, the second request is only feeding the data itself.\u003c/p\u003e\n\u003ch3 id=\"command-vs-data\"\u003eCommand vs Data\u003c/h3\u003e\n\u003cp\u003eOr \u003cem\u003eto execute or not to\u003c/em\u003e. So what happens if we still use the same input \u003ccode\u003e?id=1;DROP TABLE users;\u003c/code\u003e ? Well, the input is not parsed, neither executed. Imagine having an executable but not executing it.\u003c/p\u003e\n\u003cp\u003eLets take a look at the following code,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$data = \u0026quot;1; DROP TABLE users;\u0026quot;\n$db-\u0026gt;prepare(\u0026quot;SELECT (columns…) FROM users WHERE id=?\u0026quot;);\n\n$db-\u0026gt;execute($data);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShouldn’t this also translate to the same query? Well, the answer is \u003cstrong\u003eno\u003c/strong\u003e. AS mentioned, the query is a command that is executed, the data is not. For our instance, the data \u003ccode\u003e*1; DROP Table users*\u003c/code\u003e would fail to find a valid result.\u003c/p\u003e\n\u003cp\u003eHere are some scenarios,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIf we have proper constraints and imagine the \u003ccode\u003eid\u003c/code\u003e column is \u003ccode\u003enumeric\u003c/code\u003e (eg int)\u003c/strong\u003e the query should not return any results because \u003ccode\u003e*1;DROP TABLE users;*\u003c/code\u003e is not a numeric value and not compareable.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIf we don’t have proper constraints and \u003ccode\u003eid\u003c/code\u003e is not \u003ccode\u003enumeric\u003c/code\u003e either. Say its a \u003ccode\u003etext\u003c/code\u003e field\u003c/strong\u003e well, its used as value and the query translate to something like \u003ccode\u003e*SELECT (columns…) FROM users WHERE id=”1; DROP TABLE users”;*\u003c/code\u003e. The \u003ccode\u003e*1; DROP TABLE users”;*\u003c/code\u003e portion is the data. In direct queries and sql injections, this would translate to \u003ccode\u003e*1*\u003c/code\u003e being the data and the later part would be a query, acting as data but also being executed, causing the injection.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIf its a write query\u003c/strong\u003e in this scenario, given its numeric, it’ll cause an error because that payload is not a numeric value, and if it’s a text field, it will be inserted in the field. In summary, it will behave according to the constraints but \u003cstrong\u003eWILL NOT EXECUTE\u003c/strong\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBut either way, whether we get the results or not (with invalid inputs), and maybe the input was not sanitized, but not getting any results are not an vulnerability.\u003c/p\u003e\n\u003cp\u003eSimple, yet amazing, is it not?\u003c/p\u003e\n\u003cp\u003eFeel free to point out any mistakes I’ve made.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/prepared-statements-in-sql/",
      "date_published": "19086-19-09T852:1919:00+01:00",
      "date_modified": "19086-19-09T852:1919:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "afbe78b353f652b60d30c8caca9ebfe6c876f120",
      "title": "Building a Url Shortener With Rust and Redis",
      "summary": "",
      "content_text": "Our approach will be to make a plan for the features and work our way through.\nAll the code could be found at https://github.com/thearyanahmed/lucy\nSo, getting started, our url shortener is a program, that stores a longer form of url (text) against an unique and short text. You can think of a hashmap. Where the values are URLs and keys are unique ids.\nWe’ll need to identify the url based on the unique id. If it exists, we return it, if not, return a different result.\nThe unique ids should contain characters that can create a valid url. Because usually we’ll have an endpoint that contains the unique id. So we’ll use [0-9,a-z,A-Z] values.\nUnique IDs How many unique ids can be created from these values? 0–9 = 10, a-z and A-Z both containing 26 each. Total 10+26+26= 62 possible characters. If we use 6 characters, we should be able to create 62^6 = 56,800,235,584 values.\nFor our simple project, this should be more than enough. The formula is number of characters we can choose ^ characters we’ll use.\nA ^ n = Number of possible values\nSummary till this point Build a program that stores valid urls against an unique id\nHave the functionality to find an url by its id\nWe will be focusing on the core part of functionalities now. We want to build a library that gives us a the mentioned features.\nCoding with Rust We’ll have a simple library, that exposes find , record and all functions to our clients. And will support multiple datastores. I want to lay out the approach from a user’s perspective. We have a service (struct) called Lucy , that gives us the functionality for the following.\nSaving a new record Finding a record by uuid Finding all records The records are saved in a datastore, the datastore can be anything, hashmap, redis, mysql etc. It is accessed by a trait object ( dyn TraitName ). This trait, in our case is Datastore .\nDatastore We want our service class to have access to a datastore via a public trait object. So we can have support for multiple data stores.\npub trait Datastore { fn find(\u0026amp;mut self, uuid: \u0026amp;str) -\u0026gt; Result\u0026lt;Record, LucyError\u0026gt;; fn record(\u0026amp;mut self, record: Record) -\u0026gt; Result\u0026lt;bool, String\u0026gt;; fn all(\u0026amp;mut self) -\u0026gt; Vec\u0026lt;Record\u0026gt;; } We’ll call our library Lucy (just needed a name). And the structure is simple.\npub struct Lucy { ds: Box\u0026lt;dyn Datastore\u0026gt;, } impl Lucy { pub fn new(driver: DatastoreDriver) -\u0026gt; Lucy { } pub fn find(\u0026amp;mut self, uuid: \u0026amp;str) -\u0026gt; Result\u0026lt;Record, LucyError\u0026gt; { } pub fn record(\u0026amp;mut self, record: Record) -\u0026gt; Result\u0026lt;bool, String\u0026gt; { } pub fn all(\u0026amp;mut self) -\u0026gt; Vec\u0026lt;Record\u0026gt; { } } I’d like to address a few other things. The Record from the above code is simply a structure for holding an uuid and url.\npub struct Record { pub url: String, pub uuid: String, } And LucyError is an enum for the errors specific from this library.\npub enum LucyError { UrlNotFoundError, NotAValidUrlError } impl LucyError { pub fn to_string(\u0026amp;self) -\u0026gt; String { match *self { Self::UrlNotFoundError =\u0026gt; \u0026#34;url not found\u0026#34;.to_string(), Self::NotAValidUrlError =\u0026gt; \u0026#34;not a valid url\u0026#34;.to_string(), } } } Implement Lucy Our simple Lucy needs to be instantiated with a datastore , which can be selected from the outside.\nimpl Lucy { pub fn new(driver: DatastoreDriver) -\u0026gt; Lucy { let ds = Lucy::get_datastore(driver); Lucy { ds } } fn get_datastore(driver: DatastoreDriver) -\u0026gt; Box\u0026lt;dyn Datastore\u0026gt; { match driver { DatastoreDriver::InMemoryHashmap =\u0026gt; Box::new(HashmapStore::new()), DatastoreDriver::Redis =\u0026gt; Box::new(RedisStore::new()), } } } We want our datastore to be something dynamic, something that implements Datastore trait, anything that implements Datastore trait. For starters, we had two options, either go with generics or dynamic dispatch.\nBox is a pointer to heap allocation. More details here.\nFrom our library’s user point of view, a user (dev) would run the following code to create an instance of our Lucyservice.\nlet mut lucy = Lucy::new(DatastoreDriver::InMemoryHashmap); To record (save) an url, we call, for _ in 0..100 { match lucy.record(Record::new(faker.gen(\u0026amp;FakeOption::URL))) { Err(err) =\u0026gt; println!(\u0026#34;error: {}\u0026#34;,err), _ =\u0026gt; {}, } } To find a specific one,\nmatch lucy.find(\u0026amp;y) { Ok(r) =\u0026gt; { println!(\u0026#34;FOUND URL: {}\u0026#34;,r.url) }, Err(e) =\u0026gt; print!(\u0026#34;NOT FOUND {}\u0026#34;,e.to_string()), } And to find all of them,\nfor record in lucy.all() { println!(\u0026#34;uuid: {} url:{}\u0026#34;,record.uuid, record.url); } It’s a very simple API. Let’s implement the RedisStore to satisfy Datastore trait.\nImplement RedisStore Our redis store for only holds a connect for now. We use the conventional new function to return an new instance that has the connection to communicate with redis.\npub struct RedisStore { con: redis::Connection, } impl RedisStore { pub fn new() -\u0026gt; RedisStore { // @TODO take connection string as parameter. let client = redis::Client::open(\u0026#34;redis://127.0.0.1/\u0026#34;).expect(\u0026#34;could not connect to redis\u0026#34;); let con = client .get_connection() .expect(\u0026#34;could not get connection to redis\u0026#34;); RedisStore { con } } } Implement Datastore for RedisStore For redis’s data structure, it’ll only be a simple string SET KEY VALUE where the KEY is an uuid and value is the URL itself. I’m using redis-rs crate.\nrecord To set a record, we just run SET with given arguments.\nfn record(\u0026amp;mut self, record: Record) -\u0026gt; Result\u0026lt;bool, String\u0026gt; { match redis::cmd(\u0026#34;SET\u0026#34;).arg(record.uuid).arg(record.url).query::\u0026lt;String\u0026gt;(\u0026amp;mut self.con) { Ok(_) =\u0026gt; Ok(true), Err(err) =\u0026gt; Err(err.to_string()), } } Explanation, we run a command using cmd , with our arguments. The order of the arguments are necessary.\nfind To find a record, we use the previous approach, simply with GET command.\nfn find(\u0026amp;mut self, uuid: \u0026amp;str) -\u0026gt; Result\u0026lt;Record, LucyError\u0026gt; { match redis::cmd(\u0026#34;GET\u0026#34;).arg(uuid).query::\u0026lt;String\u0026gt;(\u0026amp;mut self.con) { Ok(url) =\u0026gt; { match Record::from(url, uuid.to_string()) { Ok(record) =\u0026gt; Ok(record), Err(_) =\u0026gt; Err(LucyError::NotAValidUrlError) } }, Err(_) =\u0026gt; Err(LucyError::UrlNotFoundError), } } all To implement all method, which will retrieve all saved records in our datastore, we first need to get all the keys and then find all the uuids and then making a bulk call using MGET key1 key2 … keyNwith all the given ids.\nfn all(\u0026amp;mut self) -\u0026gt; Vec\u0026lt;Record\u0026gt; { // Get all the keys let keys = match redis::cmd(\u0026#34;KEYS\u0026#34;).arg(\u0026#34;*\u0026#34;).query::\u0026lt;Vec\u0026lt;String\u0026gt;\u0026gt;(\u0026amp;mut self.con) { Ok(keyset) =\u0026gt; keyset, Err(_) =\u0026gt; vec![], }; if keys.len() == 0 { return vec![]; } let mut cmd = redis::cmd(\u0026#34;MGET\u0026#34;); // build the command for k in keys.clone() { cmd.arg(k); } // get redis results using MGET key1, key2, ..., keyN let urls = match cmd.query::\u0026lt;Vec\u0026lt;String\u0026gt;\u0026gt;(\u0026amp;mut self.con) { Ok(results) =\u0026gt; results, Err(_) =\u0026gt; vec![], }; if urls.len() == 0 { return vec![]; } // Result mapping let mut res : Vec\u0026lt;Record\u0026gt; = vec![]; for (i, uuid) in keys.iter().enumerate() { let url = \u0026amp;urls[i]; match Record::from(url.to_string(), uuid.to_string()) { Ok(record) =\u0026gt; res.push(record), Err(_) =\u0026gt; {}, } } res } And that does it. This is the core. Using it with a REST api, gRPC or even building a CLI or anything else is up to the dev. If the given datastores don’t work, simply write a datastore that implements Datastore.\nNotes This code doesn’t have any tests written, not yet at least. This is just a demo project. Doesn’t have a method for find_by_url to check if an url exists already. Welcoming mistakes to be pointed out. UUID collision was not addressed in the code, not yet at least. An implementation for serving to the web and over gRPC using Tokio Tonic is in drafts (built for learning purpose only). The following logic was using to generate uuid of a given length.\nGenerate UUID let unique_string: String = rand::thread_rng() .sample_iter(\u0026amp;Alphanumeric) .take(char_length) .map(char::from) .collect(); Quick Links A video on using alpha numeric ids for n characters by Tom Scott Consistent hashing An article on Consistent hashing by Tom E White More on Rust’s std::boxed::Box ",
      "content_html": "\u003cp\u003eOur approach will be to make a plan for the features and work our way through.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAll the code could be found at \u003ca href=\"https://github.com/thearyanahmed/lucy\"\u003ehttps://github.com/thearyanahmed/lucy\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSo, getting started, our url shortener is a program, that stores a longer form of url (text) against an unique and short text. You can think of a hashmap. Where the values are URLs and keys are unique ids.\u003c/p\u003e\n\u003cp\u003eWe’ll need to identify the url based on the unique id. If it exists, we return it, if not, return a different result.\u003c/p\u003e\n\u003cp\u003eThe unique ids should contain characters that can create a valid url. Because usually we’ll have an endpoint that contains the unique id. So we’ll use [0-9,a-z,A-Z] values.\u003c/p\u003e\n\u003ch2 id=\"unique-ids\"\u003eUnique IDs\u003c/h2\u003e\n\u003cp\u003eHow many unique ids can be created from these values? 0–9 = 10, a-z and A-Z both containing 26 each. Total 10+26+26= 62 possible characters. If we use 6 characters, we should be able to create 62^6 = 56,800,235,584 values.\u003c/p\u003e\n\u003cp\u003eFor our simple project, this should be more than enough. The formula is number of characters we can choose ^ characters we’ll use.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA ^ n = Number of possible values\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSummary till this point\nBuild a program that stores valid urls against an unique id\u003c/p\u003e\n\u003cp\u003eHave the functionality to find an url by its id\u003c/p\u003e\n\u003cp\u003eWe will be focusing on the core part of functionalities now. We want to build a library that gives us a the mentioned features.\u003c/p\u003e\n\u003ch2 id=\"coding-with-rust\"\u003eCoding with Rust\u003c/h2\u003e\n\u003cp\u003eWe’ll have a simple library, that exposes find , record and all functions to our clients. And will support multiple datastores. I want to lay out the approach from a user’s perspective. We have a service (struct) called Lucy , that gives us the functionality for the following.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSaving a new record\u003c/li\u003e\n\u003cli\u003eFinding a record by uuid\u003c/li\u003e\n\u003cli\u003eFinding all records\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe records are saved in a datastore, the datastore can be anything, hashmap, redis, mysql etc. It is accessed by a trait object ( dyn TraitName ). This trait, in our case is Datastore .\u003c/p\u003e\n\u003ch2 id=\"datastore\"\u003eDatastore\u003c/h2\u003e\n\u003cp\u003eWe want our service class to have access to a datastore via a public trait object. So we can have support for multiple data stores.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003etrait\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eDatastore\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003efind\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucyError\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003ebool\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eall\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eVec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe’ll call our library Lucy (just needed a name). And the structure is simple.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eLucy\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eds\u003c/span\u003e: \u003cspan style=\"color:#111\"\u003eBox\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003edyn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eDatastore\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eimpl\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucy\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eDatastoreDriver\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#75af00\"\u003eLucy\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003efind\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucyError\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003ebool\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eall\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eVec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI’d like to address a few other things. The Record from the above code is simply a structure for holding an uuid and url.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eRecord\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e: \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd LucyError is an enum for the errors specific from this library.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eenum\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eLucyError\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eUrlNotFoundError\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eNotAValidUrlError\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eimpl\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucyError\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eSelf\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eUrlNotFoundError\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#d88200\"\u003e\u0026#34;url not found\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eSelf\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eNotAValidUrlError\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#d88200\"\u003e\u0026#34;not a valid url\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"implement-lucy\"\u003eImplement Lucy\u003c/h2\u003e\n\u003cp\u003eOur simple Lucy needs to be instantiated with a datastore , which can be selected from the outside.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eimpl\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucy\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eDatastoreDriver\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#75af00\"\u003eLucy\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eds\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucy\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eget_datastore\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003edriver\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003eLucy\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eds\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eget_datastore\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eDatastoreDriver\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eBox\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003edyn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eDatastore\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003edriver\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eDatastoreDriver\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eInMemoryHashmap\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eBox\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eHashmapStore\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eDatastoreDriver\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eRedis\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eBox\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRedisStore\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe want our datastore to be something dynamic, something that implements Datastore trait, anything that implements Datastore trait. For starters, we had two options, either go with generics or dynamic dispatch.\u003c/p\u003e\n\u003cp\u003eBox is a pointer to heap allocation. More details here.\u003c/p\u003e\n\u003cp\u003eFrom our library’s user point of view, a user (dev) would run the following code to create an instance of our Lucyservice.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003elucy\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucy\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eDatastoreDriver\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eInMemoryHashmap\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003eTo\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003esave\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ean\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ewe\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ecall\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e..\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003elucy\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003efaker\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003egen\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eFakeOption\u003c/span\u003e::\u003cspan style=\"color:#00a8c8\"\u003eURL\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)))\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eerr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;error: \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eerr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo find a specific one,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003elucy\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003efind\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ey\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003er\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;FOUND URL: \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003er\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#111\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ee\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eprint!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;NOT FOUND \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ee\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd to find all of them,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#111\"\u003elucy\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eall\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;uuid: \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e url:\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s a very simple API. Let’s implement the RedisStore to satisfy Datastore trait.\u003c/p\u003e\n\u003ch2 id=\"implement-redisstore\"\u003eImplement RedisStore\u003c/h2\u003e\n\u003cp\u003eOur redis store for only holds a connect for now. We use the conventional new function to return an new instance that has the connection to communicate with redis.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eRedisStore\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eredis\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eConnection\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eimpl\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eRedisStore\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003enew\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#75af00\"\u003eRedisStore\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// @TODO take connection string as parameter.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eredis\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eClient\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eopen\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;redis://127.0.0.1/\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eexpect\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;could not connect to redis\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eclient\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eget_connection\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eexpect\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;could not get connection to redis\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003eRedisStore\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e \u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"implement-datastore-for-redisstore\"\u003eImplement Datastore for RedisStore\u003c/h2\u003e\n\u003cp\u003eFor redis’s data structure, it’ll only be a simple string SET KEY VALUE where the KEY is an uuid and value is the URL itself. I’m using redis-rs crate.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003erecord\u003c/strong\u003e To set a record, we just run SET with given arguments.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e: \u003cspan style=\"color:#75af00\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003ebool\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eredis\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;SET\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003earg\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003earg\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003equery\u003c/span\u003e::\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003etrue\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eerr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eerr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExplanation, we run a command using cmd , with our arguments. The order of the arguments are necessary.\u003c/p\u003e\n\u003cp\u003efind To find a record, we use the previous approach, simply with GET command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003efind\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eResult\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eLucyError\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eredis\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003earg\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003equery\u003c/span\u003e::\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e())\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eLucyError\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eNotAValidUrlError\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eLucyError\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003eUrlNotFoundError\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eall To implement all method, which will retrieve all saved records in our datastore, we first need to get all the keys and then find all the uuids and then making a bulk call using MGET key1 key2 … keyNwith all the given ids.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eall\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eVec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Get all the keys\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ekeys\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eredis\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;KEYS\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003earg\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#111\"\u003equery\u003c/span\u003e::\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eVec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ekeyset\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ekeyset\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003evec!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ekeys\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003elen\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#00a8c8\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003evec!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eredis\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;MGET\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// build the command\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#00a8c8\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ekeys\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eclone\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003earg\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ek\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// get redis results using MGET key1, key2, ..., keyN\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eurls\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ecmd\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003equery\u003c/span\u003e::\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eVec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eself\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003econ\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eresults\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eresults\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003evec!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eurls\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003elen\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#00a8c8\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003evec!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Result mapping\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eres\u003c/span\u003e : \u003cspan style=\"color:#111\"\u003eVec\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003evec!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#00a8c8\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ekeys\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eiter\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e().\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eenumerate\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurls\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#00a8c8\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eRecord\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eurl\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(),\u003c/span\u003e \u003cspan style=\"color:#111\"\u003euuid\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eto_string\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e())\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#111\"\u003eOk\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eres\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003epush\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erecord\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#111\"\u003eErr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e_\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003eres\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that does it. This is the core. Using it with a REST api, gRPC or even building a CLI or anything else is up to the dev. If the given datastores don’t work, simply write a datastore that implements Datastore.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThis code doesn’t have any tests written, not yet at least.\u003c/li\u003e\n\u003cli\u003eThis is just a demo project.\u003c/li\u003e\n\u003cli\u003eDoesn’t have a method for find_by_url to check if an url exists already.\u003c/li\u003e\n\u003cli\u003eWelcoming mistakes to be pointed out.\u003c/li\u003e\n\u003cli\u003eUUID collision was not addressed in the code, not yet at least.\u003c/li\u003e\n\u003cli\u003eAn implementation for serving to the web and over gRPC using Tokio Tonic is in drafts (built for learning purpose only).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following logic was using to generate uuid of a given length.\u003c/p\u003e\n\u003ch2 id=\"generate-uuid\"\u003eGenerate UUID\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eunique_string\u003c/span\u003e: \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erand\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003ethread_rng\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003esample_iter\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eAlphanumeric\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003etake\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003echar_length\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003echar\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ecollect\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"quick-links\"\u003eQuick Links\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA video on using \u003ca href=\"https://www.youtube.com/watch?v=gocwRvLhDf8\u0026amp;t=1s\u0026amp;ab_channel=TomScott\"\u003ealpha numeric ids for n characters by Tom Scott\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Consistent_hashing\"\u003eConsistent hashing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAn article on \u003ca href=\"https://tom-e-white.com/2007/11/consistent-hashing.html\"\u003eConsistent hashing\u003c/a\u003e by Tom E White\u003c/li\u003e\n\u003cli\u003eMore on \u003ca href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\"\u003eRust’s std::boxed::Box\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
      "url": "http://localhost:1313/posts/building-a-url-shortener-with-rust-and-redis/",
      "date_published": "9086-09-09T846:99:00+01:00",
      "date_modified": "9086-09-09T846:99:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "b7a1dddbe0788689f2d535d32bbde919fb78789f",
      "title": "Rust Memory Ownership and Borrowing",
      "summary": "",
      "content_text": "Rust has a pretty good approach to handling this. There is a bit of learning curve. But if you skip it for any reason, or don’t understand it quite well, then it’ll be difficult for you to write good rust code.\nIt’s the ownership model. That keeps us safe and lets us sleep at night after we deploy we rust code to production. This is also how rust avoids a garbage collector.\nThis is my take on the matter, as I’m learning, I might have made a mistake while writing, feel free to point it out.\nLets get started,\nThe Stack *In computer science, a stack is an abstract data type that serves as a collection of elements, with two main principal operations: *Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed. — WikiPedia\nSo, a stack, the idea is to say have objects on top of another. When we add an object, we add it to the top. And when we remove anything from it, we also do it from the top.\nThe Stack Frame Our code, in terms of execution, think that it is loaded in the stack. So, for rust, we start from the main function. We put our main function on the stack.\nHow to put it…? Imagine our stack frame is a sheet of paper. And the function body is on the sheet of paper.\nAnd imagine our processor is a person, who reads the current sheet of paper in-front of him, and does what’s instructed.\nThe current stackframe is also, in other words the scope.\nWhen a function is called When a function is called, that is when we actually put our sheet of paper on top of our stack. Lets take a look at the following code,\nfn main() { println!(\u0026#34;Hello, World\u0026#34;); let x = 10; println(\u0026#34;{}\u0026#34;, x); print_another_variable(); } fn print_another_variable() { let k = 11; println!(\u0026#34;{}\u0026#34;,k) } Our first stackframe is the main() function body. It writes Hello, World, then assigns the value 10 to x, then prints it. Then calls another function print_another_variable().\nprint_another_variable() is written in another sheet of paper. When we call it in our main function, we put print_another_variable() sheet on top of our main() sheet.\nNow our processor person is reading from what to do from the function write in front of him. Our processor person can only see (access) the page right in front of him. Not the pages beneath.\nAfter the function has been completed, the sheet of paper is torn apart. And we back to the line this function was called from, and move forward.\nStack is very fast\nNow, when we put something on the stack, we need to tell it how much memory we need. For an i32 for example, the size is know. It’s a 32 bit signed integer.\nIf we try to remember, the maximum value for an integer is 2147483647. If we try to put anything beyond that, it’ll overflow. But the key point is we know the bits. 32 bits fixed. Putting something bigger won’t make it 33 bits. It’ll always be 32 bits.\nSize Unknown Putting stuff on the stack works fine when the size is known. But what about the times we don’t know the size? For example a slice or vector? Or a string (not a char) .\nLet’s think for a moment, we want to store dynamic values. Where the value can grow or shrink. Take an array. Array’s has a fixed length. An array[5] can hold 5 elements at max.\nBut a vector can grow, you can start with 5 elements, end up having N where N is \u0026lt;, = or \u0026gt; than 5. We can not ask our stack to give us unlimited space.\nFor these problems, let’s add a layer in between. We don’t directly put the growable data in to the stack, we put our growable dynamic data somewhere else. And, we put a pointer, which’s size is known, we put the point to our stack.\nHeap Our heap is not as fast and efficient as our stack, but it gives us support for handling dynamic content like strings or vectors.\nPutting our growable dynamic data somewhere else. This somewhere else is our heap.\nLets take a look at the code below,\nfn main() { let a = String::from(\u0026#34;Hello, World\u0026#34;); } For this piece of code, we tell the heap to store “Hello, World” string into memory. It checks how much space does it need based on what we have currently. We have 12 characters (comma and space included).\nThe heap takes say memory address 0xAB0001 (lets assume), and starts putting our string. Imagine the sequence goes on like this 0xAB0001, 0xAB0002 … 0xABN.\nOur hello world string ends at 0xAB0012. But what do we store in our stack? Our stack holds the following values,\nptr = 0xAB0001 # a pointer to our first memory address cap = 12 # cap stands for capacity len = 12 # len stands for length If we update the string to Hello, our capacity still remain 12, but our length will be 5.\nAnd we know the size of the pointer variable itself. If we break down capacity and length, we know their value too.\nSo we have a solution. Let’s take a look at the 3 rules of ownership rust tells us about.\n3 Rules of Ownership Each value in Rust has a variable that’s called its owner. There can only be one owner at a time. When the owner goes out of scope, the value will be dropped. Copy \u0026amp; Pointer Lets take this example for a moment\nlet x = 100; let y = x; This will trigger a COPY. Copy of the value 100. Cause x in this case is an integer, or in other words, a known sized variable. Same for other known sized. It’s cheap and fast to copy them around.\nBut, for the following code,\nlet a = String::from(\u0026#34;Hello\u0026#34;); let b = a ; So, like before, a should be a pointer to the heap memory, holding the data “Hello”. If so, now when we assign b, if it copies the pointer like we would do for an integer or known sized data type, then our “Hello” would have two owners.\n2 Owners \u0026amp; Double Free Error For our analogy mentioned above, Hello has two owners. But if one changes, there isn’t any way for the other one to know that something has changed.\nMaybe for a we have changed it to “Hello, Universe, this is from the Milky Way galaxy.”, the capacity and length both has changed. But for b, it doesn’t know yet! The pointers get out of sync.\nNow when it’s time to clean up the memory, both owners a and b tries to clear the memory. That will trigger error, cause say a clears the memory at first, and then (imagine), even if it is the very next step b tries to clear the memory.\nBut it has already been cleared!\nLet’s think of another scenario, our capacity was 12. Now we assign a very long string, and make the length (and capacity) of the string 500.\nThese are 500 characters of single chars. They need to sit next to one another. Just like an array. Remember array takes a fixed memory, so all the elements sits next to another according to the sequence?\nNow, the CPU sees that there isn’t 500 free blocks of memory from that 0xAB0001. Meaning, we would need from 0xAB0001 to 0xAB0500 continuous.\nSeeing that the space is not available, it reassigns the value to a next memory address. Maybe 0xQQ0001 to OxQQ0500.\nBut for b, there is no way to know that the string *ptr -\u0026gt; should not longer point to 0xAB0001. Resulting in garbage value.\nRust’s solution So for rust, when assigning let b = a where a is a string or of unknown sized data type, it triggers a move instead of copy. Meaning, the pointer information that was stored in a, is now stored in b, and a doesn’t have that information.\nIf we run the following program, it’ll cause an error, saying `move occurs because a has type String, which does not implement the Copy.\nlet a = String::from(\u0026#34;Hello\u0026#34;); println!(\u0026#34;{}\u0026#34;,a); let b = a; println!(\u0026#34;b = {}\u0026#34;,b); println!(\u0026#34;a = {}\u0026#34;,a); Copying the unknown sized data If we wanted to copy the actual value “Hello” to be, we need to do a Clone instead like let b = a.clone(). And take a moment to realise that these solutions abide by the rules of ownership.\nRule 3 — Out of scopes Take a look at the following,\nfn main() { let a = String::from(\u0026#34;Hello\u0026#34;); print_something(a); println!(\u0026#34;a in main =\u0026gt; {}\u0026#34;, a); } fn print_something(a : String) { println!(\u0026#34;inside the function =\u0026gt; {}\u0026#34;, a); } Function params behave in a similar way. In this print_something() function, we pass in an argument a : String . See the function does not return anything.\nSo, the variable’s pointer information is passed to that function’s a parameter. Just like let b = a example mentioned above. Also, remember that functions are like a sheet of paper? So when the call ends, it’s torn apart.\nIn rust’s words, the value is dropped.\nWhat happens here? This program will throw an error. Once the ownership of a has been passed to print_something, and print_something has been executed, it goes out of scope. And as the function doesn’t return anything, all the value inside it is dropped.\nTherefore, in the main function, we don’t have any value for a. We gave the ownership away. Now running println!(“a in main =\u0026gt; {}”, a); after calling print_something() will trigger an error.\nBut if we called the print_something() function after println, then it would not be a problem cause during println, the a variable still holds the information.\nReturning the ownership Another way to solve it is to return a value from the function. Take the following code and it will run just fine.\nfn main() { // added `mut` here let mut a = String::from(\u0026#34;Hello\u0026#34;); a = print_something(a); println!(\u0026#34;a in main =\u0026gt; {}\u0026#34;, a); } // Notice the \u0026#34; -\u0026gt; String\u0026#34;, it means it is gonna return a string fn print_something(a : String) -\u0026gt; String { println!(\u0026#34;inside the function =\u0026gt; {}\u0026#34;, a); a // here we are returning a string value } We needed to add mut because rust’s variables are by default immutable. But the key point here is in a = print_something(a), we are getting back a string from the print_something() function.\nBorrowing | Passing the reference Another solution would be to pass the reference. Take the following example\nfn main() { let a = String::from(\u0026#34;Hello\u0026#34;); // we are passing a reference, denoted by \u0026#39;\u0026amp;\u0026#39; print_something(\u0026amp;a); println!(\u0026#34;a in main =\u0026gt; {}\u0026#34;, a); } // see I\u0026#39;ve added \u0026#39;\u0026amp;\u0026#39; before String fn print_something(a : \u0026amp;String) { println!(\u0026#34;inside the function =\u0026gt; {}\u0026#34;, a); } This also runs well.\nSingle mutable borrow at a time Rust allows single mutable borrow at a time. You can have multiple immutable or read only borrows. But you can not have\nlet mut a = String::from(\u0026#34;a\u0026#34;); let b = \u0026amp;mut a; let c = \u0026amp;mut a; It’ll throw an error. Going back to the same problem, imagine b changes some data but c doesn’t know about it.\nOwnership, Read only borrow , Mutable borrow and Returning ownership You can tell what a function do.\nfn a_func(takes_ownership: String, read_only_borrow: \u0026amp;str, mutable_borrow: \u0026amp;mut String){} // add \u0026lsquo;-\u0026gt; String\u0026rsquo; before the first curly brace if you want it to return some ownership.// add \u0026lsquo;-\u0026gt; String\u0026rsquo; before the first curly brace if you want it to return some ownership. Update: I would like add the following two sections based on the feedback I’ve received.\nBorrow vs Move under the hood that “borrow” keeps the data at the same place on the stack and passes a memory pointer only, but “move” always copies it from one place of the stack to other one. Therefore, only sized data can be moved, and it can cause a performance issue. In this way lifetime is automatically ensured by how stack works. -Tibor Erdelyi , Lead Software Engineer at Upland BA Insight\nMultiple mutation\nWhile technically Rust offers only one mutable borrow, with Cell you can have multiple \u0026amp;Cell which allow mutation of the contents using Cell::::set(\u0026amp;self, T) associated function.\nDmitrii Demenev Footnote Why write this article? Because, when I started reading the rust book I thought it might be simply like some other language. Some string functions to lowercase and uppercase and finding length or concatenating.\nI was wrong. Rust book gave me a very good tour of the stack and heap mechanism. It was a nice reminder but a lot to take in. Specially coming from PHP, JavaScript.\nAnd soon after, though I continued to read the book, I had forgotten about the ownership and borrowing.\nSo I thought I write it down, after looking at some videos and reading the chapter again.\n",
      "content_html": "\u003cp\u003eRust has a pretty good approach to handling this. There is a bit of learning curve. But if you skip it for any reason, or don’t understand it quite well, then it’ll be difficult for you to write good rust code.\u003c/p\u003e\n\u003cp\u003eIt’s the ownership model. That keeps us safe and lets us sleep at night after we deploy we rust code to production. This is also how rust avoids a garbage collector.\u003c/p\u003e\n\u003cp\u003eThis is my take on the matter, as I’m learning, I might have made a mistake while writing, feel free to point it out.\u003c/p\u003e\n\u003cp\u003eLets get started,\u003c/p\u003e\n\u003ch2 id=\"the-stack\"\u003eThe Stack\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e*In computer science, a stack is an abstract data type that serves as a collection of elements, with two main principal operations: *Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed. — WikiPedia\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSo, a stack, the idea is to say have objects on top of another. When we add an object, we add it to the top. And when we remove anything from it, we also do it from the top.\u003c/p\u003e\n\u003ch2 id=\"the-stack-frame\"\u003eThe Stack Frame\u003c/h2\u003e\n\u003cp\u003eOur code, in terms of execution, think that it is loaded in the stack. So, for rust, we start from the main function. We put our main function on the stack.\u003c/p\u003e\n\u003cp\u003eHow to put it…? Imagine our stack frame is a sheet of paper. And the function body is on the sheet of paper.\u003c/p\u003e\n\u003cp\u003eAnd imagine our processor is a person, who reads the current sheet of paper in-front of him, and does what’s instructed.\u003c/p\u003e\n\u003cp\u003eThe current stackframe is also, in other words the scope.\u003c/p\u003e\n\u003ch2 id=\"when-a-function-is-called\"\u003eWhen a function is called\u003c/h2\u003e\n\u003cp\u003eWhen a function is called, that is when we actually put our sheet of paper on top of our stack. Lets take a look at the following code,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello, World\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eprintln\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;{}\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eprint_another_variable\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eprint_another_variable\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ek\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ek\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur first stackframe is the main() function body. It writes Hello, World, then assigns the value 10 to x, then prints it. Then calls another function print_another_variable().\u003c/p\u003e\n\u003cp\u003eprint_another_variable() is written in another sheet of paper. When we call it in our main function, we put print_another_variable() sheet on top of our main() sheet.\u003c/p\u003e\n\u003cp\u003eNow our processor person is reading from what to do from the function write in front of him. Our processor person can only see (access) the page right in front of him. Not the pages beneath.\u003c/p\u003e\n\u003cp\u003eAfter the function has been completed, the sheet of paper is torn apart. And we back to the line this function was called from, and move forward.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eStack is very fast\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eNow, when we put something on the stack, we need to tell it how much memory we need. For an i32 for example, the size is know. It’s a 32 bit signed integer.\u003c/p\u003e\n\u003cp\u003eIf we try to remember, the maximum value for an integer is 2147483647. If we try to put anything beyond that, it’ll overflow. But the key point is we know the bits. 32 bits fixed. Putting something bigger won’t make it 33 bits. It’ll always be 32 bits.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSize Unknown\nPutting stuff on the stack works fine when the size is known. But what about the times we don’t know the size? For example a slice or vector? Or a string (not a char) .\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eLet’s think for a moment, we want to store dynamic values. Where the value can grow or shrink. Take an array. Array’s has a fixed length. An array[5] can hold 5 elements at max.\u003c/p\u003e\n\u003cp\u003eBut a vector can grow, you can start with 5 elements, end up having N where N is \u0026lt;, = or \u0026gt; than 5. We can not ask our stack to give us unlimited space.\u003c/p\u003e\n\u003cp\u003eFor these problems, let’s add a layer in between. We don’t directly put the growable data in to the stack, we put our growable dynamic data somewhere else. And, we put a pointer, which’s size is known, we put the point to our stack.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHeap\nOur heap is not as fast and efficient as our stack, but it gives us support for handling dynamic content like strings or vectors.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003ePutting our growable dynamic data somewhere else. This somewhere else is our heap.\u003c/p\u003e\n\u003cp\u003eLets take a look at the code below,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello, World\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor this piece of code, we tell the heap to store “Hello, World” string into memory. It checks how much space does it need based on what we have currently. We have 12 characters (comma and space included).\u003c/p\u003e\n\u003cp\u003eThe heap takes say memory address 0xAB0001 (lets assume), and starts putting our string. Imagine the sequence goes on like this 0xAB0001, 0xAB0002 … 0xABN.\u003c/p\u003e\n\u003cp\u003eOur hello world string ends at 0xAB0012. But what do we store in our stack? Our stack holds the following values,\u003c/p\u003e\n\u003cp\u003eptr = 0xAB0001 # a pointer to our first memory address\ncap = 12 # cap stands for capacity\nlen = 12 # len stands for length\nIf we update the string to Hello, our capacity still remain 12, but our length will be 5.\u003c/p\u003e\n\u003cp\u003eAnd we know the size of the pointer variable itself. If we break down capacity and length, we know their value too.\u003c/p\u003e\n\u003cp\u003eSo we have a solution. Let’s take a look at the 3 rules of ownership rust tells us about.\u003c/p\u003e\n\u003ch2 id=\"3-rules-of-ownership\"\u003e3 Rules of Ownership\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eEach value in Rust has a variable that’s called its owner.\u003c/li\u003e\n\u003cli\u003eThere can only be one owner at a time.\u003c/li\u003e\n\u003cli\u003eWhen the owner goes out of scope, the value will be dropped.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"copy--pointer\"\u003eCopy \u0026amp; Pointer\u003c/h2\u003e\n\u003cp\u003eLets take this example for a moment\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will trigger a COPY. Copy of the value 100. Cause x in this case is an integer, or in other words, a known sized variable. Same for other known sized. It’s cheap and fast to copy them around.\u003c/p\u003e\n\u003cp\u003eBut, for the following code,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo, like before, a should be a pointer to the heap memory, holding the data “Hello”. If so, now when we assign b, if it copies the pointer like we would do for an integer or known sized data type, then our “Hello” would have two owners.\u003c/p\u003e\n\u003ch2 id=\"2-owners--double-free-error\"\u003e2 Owners \u0026amp; Double Free Error\u003c/h2\u003e\n\u003cp\u003eFor our analogy mentioned above, Hello has two owners. But if one changes, there isn’t any way for the other one to know that something has changed.\u003c/p\u003e\n\u003cp\u003eMaybe for a we have changed it to “Hello, Universe, this is from the Milky Way galaxy.”, \u003cstrong\u003ethe capacity and length both has changed. But for b, it doesn’t know yet! The pointers get out of sync\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eNow when it’s time to clean up the memory, both owners a and b tries to clear the memory. That will trigger error, cause say a clears the memory at first, and then (imagine), even if it is the very next step b tries to clear the memory.\u003c/p\u003e\n\u003cp\u003eBut it has already been cleared!\u003c/p\u003e\n\u003cp\u003eLet’s think of another scenario, our capacity was 12. Now we assign a very long string, and make the length (and capacity) of the string 500.\u003c/p\u003e\n\u003cp\u003eThese are 500 characters of single chars. They need to sit next to one another. Just like an array. Remember array takes a fixed memory, so all the elements sits next to another according to the sequence?\u003c/p\u003e\n\u003cp\u003eNow, the CPU sees that there isn’t 500 free blocks of memory from that 0xAB0001. Meaning, we would need from 0xAB0001 to 0xAB0500 continuous.\u003c/p\u003e\n\u003cp\u003eSeeing that the space is not available, it reassigns the value to a next memory address. Maybe 0xQQ0001 to OxQQ0500.\u003c/p\u003e\n\u003cp\u003eBut for b, there is no way to know that the string *ptr -\u0026gt; should not longer point to 0xAB0001. Resulting in garbage value.\u003c/p\u003e\n\u003ch2 id=\"rusts-solution\"\u003eRust’s solution\u003c/h2\u003e\n\u003cp\u003eSo for rust, when assigning let b = a where a is a string or of unknown sized data type, it triggers a move instead of copy. Meaning, the pointer information that was stored in a, is now stored in b, and a doesn’t have that information.\u003c/p\u003e\n\u003cp\u003eIf we run the following program, it’ll cause an error, saying `move occurs because a has type String, which does not implement the Copy.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;b = \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;a = \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"copying-the-unknown-sized-data\"\u003eCopying the unknown sized data\u003c/h2\u003e\n\u003cp\u003eIf we wanted to copy the actual value “Hello” to be, we need to do a Clone instead like let b = a.clone(). And take a moment to realise that these solutions abide by the rules of ownership.\u003c/p\u003e\n\u003ch2 id=\"rule-3--out-of-scopes\"\u003eRule 3 — Out of scopes\u003c/h2\u003e\n\u003cp\u003eTake a look at the following,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprint_something\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;a in main =\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eprint_something\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e : \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;inside the function =\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFunction params behave in a similar way. In this print_something() function, we pass in an argument a : String . See the function does not return anything.\u003c/p\u003e\n\u003cp\u003eSo, the variable’s pointer information is passed to that function’s a parameter. Just like let b = a example mentioned above. Also, remember that functions are like a sheet of paper? So when the call ends, it’s torn apart.\u003c/p\u003e\n\u003cp\u003eIn rust’s words, the value is dropped.\u003c/p\u003e\n\u003cp\u003eWhat happens here? This program will throw an error. Once the ownership of a has been passed to print_something, and print_something has been executed, it goes out of scope. And as the function doesn’t return anything, all the value inside it is dropped.\u003c/p\u003e\n\u003cp\u003eTherefore, in the main function, we don’t have any value for a. We gave the ownership away. Now running println!(“a in main =\u0026gt; {}”, a); after calling print_something() will trigger an error.\u003c/p\u003e\n\u003cp\u003eBut if we called the print_something() function after println, then it would not be a problem cause during println, the a variable still holds the information.\u003c/p\u003e\n\u003ch2 id=\"returning-the-ownership\"\u003eReturning the ownership\u003c/h2\u003e\n\u003cp\u003eAnother way to solve it is to return a value from the function. Take the following code and it will run just fine.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// added `mut` here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eprint_something\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;a in main =\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Notice the \u0026#34; -\u0026gt; String\u0026#34;, it means it is gonna return a string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eprint_something\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e : \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;inside the function =\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// here we are returning a string value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe needed to add mut because rust’s variables are by default immutable. But the key point here is in a = print_something(a), we are getting back a string from the print_something() function.\u003c/p\u003e\n\u003ch2 id=\"borrowing--passing-the-reference\"\u003eBorrowing | Passing the reference\u003c/h2\u003e\n\u003cp\u003eAnother solution would be to pass the reference. Take the following example\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003emain\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// we are passing a reference, denoted by \u0026#39;\u0026amp;\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eprint_something\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;a in main =\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// see I\u0026#39;ve added \u0026#39;\u0026amp;\u0026#39; before String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eprint_something\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e : \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#111\"\u003eprintln!\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;inside the function =\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis also runs well.\u003c/p\u003e\n\u003ch2 id=\"single-mutable-borrow-at-a-time\"\u003eSingle mutable borrow at a time\u003c/h2\u003e\n\u003cp\u003eRust allows single mutable borrow at a time. You can have multiple immutable or read only borrows. But you can not have\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e::\u003cspan style=\"color:#111\"\u003efrom\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eb\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ea\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’ll throw an error. Going back to the same problem, imagine b changes some data but c doesn’t know about it.\u003c/p\u003e\n\u003cp\u003eOwnership, Read only borrow , Mutable borrow and Returning ownership\nYou can tell what a function do.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003ea_func\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003etakes_ownership\u003c/span\u003e: \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eread_only_borrow\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003emutable_borrow\u003c/span\u003e: \u003cspan style=\"color:#00a8c8\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#75af00\"\u003emut\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eString\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e){}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e// add \u0026lsquo;-\u0026gt; String\u0026rsquo; before the first curly brace if you want it to return some ownership.// add \u0026lsquo;-\u0026gt; String\u0026rsquo; before the first curly brace if you want it to return some ownership.\n\u003cstrong\u003eUpdate\u003c/strong\u003e: I would like add the following two sections based on the feedback I’ve received.\u003c/p\u003e\n\u003ch2 id=\"borrow-vs-move-under-the-hood\"\u003eBorrow vs Move under the hood\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003ethat “borrow” keeps the data at the same place on the stack and passes a memory pointer only, but “move” always copies it from one place of the stack to other one. Therefore, only sized data can be moved, and it can cause a performance issue. In this way lifetime is automatically ensured by how stack works.\n-Tibor Erdelyi , Lead Software Engineer at Upland BA Insight\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eMultiple mutation\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhile technically Rust offers only one mutable borrow, with Cell\u003cT\u003e you can have multiple \u0026amp;Cell\u003cT\u003e which allow mutation of the contents using Cell::\u003cT\u003e::set(\u0026amp;self, T) associated function.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eDmitrii Demenev\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"footnote\"\u003eFootnote\u003c/h2\u003e\n\u003cp\u003eWhy write this article? Because, when I started reading the rust book I thought it might be simply like some other language. Some string functions to lowercase and uppercase and finding length or concatenating.\u003c/p\u003e\n\u003ch2 id=\"i-was-wrong\"\u003eI was wrong.\u003c/h2\u003e\n\u003cp\u003eRust book gave me a very good tour of the stack and heap mechanism. It was a nice reminder but a lot to take in. Specially coming from PHP, JavaScript.\u003c/p\u003e\n\u003cp\u003eAnd soon after, though I continued to read the book, I had forgotten about the ownership and borrowing.\u003c/p\u003e\n\u003cp\u003eSo I thought I write it down, after looking at some videos and reading the chapter again.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/rust-memory-ownership-and-borrowing/",
      "date_published": "27066-27-09T643:2727:00+01:00",
      "date_modified": "27066-27-09T643:2727:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "bedd11f5a7927bc3c9baaca9e3c6a65377581dab",
      "title": "Saying Goodbye to Evernote Finally",
      "summary": "",
      "content_text": "I’m an average note taker. But, I do take notes on a regular basis. I prefer writing things down, helps me tackle them. Whether it is a task, or just planning about next week or anything.\nAs working in tech, obviously I tried out some digital note taking apps and I think I’ve tried out most of the major ones (till now, as of writing, 2. Mar 2024). I started my digital note taking with Evernote. I then switched to something else but mainly for trying and finally settled for evernote in 2017.\nI liked their design, 3 column view. We could focus on the note itself when writing or perhaps reading. And supported many options for formatting. Like tables.\nHowever, over the years, evernote has lacked innovation and it’s development was poor to say the least. I do not know what was going on inside the company. But as a customer, it was very very disappointing.\nI obviously switched to different notes and tried them out and kept an eye on evernote. I’d often switch back, take 1 month’s subscription and see how things have improved. I risked more than a handful number of times to migrate all my notes to evernote and had to switch back after sometime.\nIn the productivity space, which I think evernote roams around, simplicity is your best friend. In other words, complex systems can make you less productive. A productive note taking app (or any app in this space) should be a companion, I want it like something at the back of my head but not too bothered with. Simple, fast and it works.\nOver the years, evernote lost all three I guess. They were so busy with their ‘home’ and ‘tasks’, they didn’t bother to keep the basic things running. Or they failed to do so.\nThe only widget that was somewhat useful in evernote’s home page was the Tasks area, which would show you today’s tasks. Apart from that, showing notebooks, recently captured, pinned note, recent notes, none of them were that appealing or had made any impact.\nIntegration with calendars, tasks, organize your home. But evernote became very slow. I had so much trouble syncing with my mobile and desktop version of the app. And if you are editing the same note, its a nightmare.\nAnd by editing, I just mean opeing that note on a different device, if the app thought it was in editing mode, maybe I had clicked somewhere which triggered collusions.\nRecently they went through some major changes and I thought, okay, maybe one last time. I wanna try it out for a longer period of time and see if I can make it or not.\nAfter (re)starting my days with evernote, they soon released a new UI and the classic black sidebar white 3 column were no more. I personally did not like the new glassy look. I at least hoped they’d allow us to choose. They did, but not between the glassy and old one. You can choose between light and dark mode and thats about it. At least I could not find the old one!\nI really liked this UI. Besides that, the space between the tasks themselves, the limited fonts, adding AI to do cleanup… why? Design is subjective, one can say they liked the design, and sure. But this article is about my own experience.\nHowever, the new design wasn’t so poor though. I can make do. On March 2nd, 2024 I recevied a new notification that says new update available. I did. I had to restart my evernote and … it took around 12-15 seconds to start.\nIt was horribly slow, even on the same notebook, if I clicked one note and then clicked another for editing, it would take a long time to render and then open in editing mode. I don’t have the best computer in the world, but still running a macbook with m1. That can run other stuff well.\nAfter trying to troubleshoot for sometime, I finally tried to open other note apps (apple note and bear) and decided to move on. I’ll be working ( going back ) to bear. They are a small team, who built an amazing app. Very beautiful, simple and works.\nSo, since 2017 till now, tried my best to keep up with evernote and go back when I could, in the end, the bear killed the elephant.\nThis was my experience, I hope and pray other people are having better experience. And I hope, the evernote team would remember about simplicity.\n",
      "content_html": "\u003cp\u003eI’m an average note taker. But, I do take notes on a regular basis. I prefer writing things down, helps me tackle them. Whether it is a task, or just planning about next week or anything.\u003c/p\u003e\n\u003cp\u003eAs working in tech, obviously I tried out some digital note taking apps and I think I’ve tried out most of the major ones (till now, as of writing, 2. Mar 2024). I started my digital note taking with \u003ca href=\"https://www.evernote.com/\"\u003eEvernote\u003c/a\u003e.  I then switched to something else but mainly for trying and finally settled for evernote in 2017.\u003c/p\u003e\n\u003cp\u003eI liked their design, 3 column view. We could focus on the note itself when writing or perhaps reading. And supported many options for formatting. Like tables.\u003c/p\u003e\n\u003cp\u003eHowever, over the years, evernote has lacked innovation and it’s development was poor to say the least. I do not know what was going on inside the company. But as a customer, it was very very disappointing.\u003c/p\u003e\n\u003cp\u003eI obviously switched to different notes and tried them out and kept an eye on evernote. I’d often switch back, take 1 month’s subscription and see how things have improved. I risked more than a handful number of times to migrate all my notes to evernote and had to switch back after sometime.\u003c/p\u003e\n\u003cp\u003eIn the productivity space, which I think evernote roams around, simplicity is your best friend. In other words, complex systems can make you less productive. A productive note taking app (or any app in this space) should be a companion, I want it like something at the back of my head but not too bothered with. Simple, fast and it works.\u003c/p\u003e\n\u003cp\u003eOver the years, evernote lost all three I guess. They were so busy with their ‘\u003cstrong\u003ehome\u003c/strong\u003e’ and ‘\u003cstrong\u003etasks\u003c/strong\u003e’, they didn’t bother to keep the basic things running. Or they failed to do so.\u003c/p\u003e\n\u003cp\u003eThe only widget that was somewhat useful in evernote’s home page was the Tasks area, which would show you today’s tasks. Apart from that, showing notebooks, recently captured, pinned note, recent notes, none of them were that appealing or had made any impact.\u003c/p\u003e\n\u003cp\u003eIntegration with calendars, tasks, organize your home. But evernote became very slow. I had so much trouble syncing with my mobile and desktop version of the app. And if you are editing the same note, its a nightmare.\u003c/p\u003e\n\u003cp\u003eAnd by editing, I just mean opeing that note on a different device, if the app thought it was in editing mode, maybe I had clicked somewhere which triggered collusions.\u003c/p\u003e\n\u003cp\u003eRecently they went through some major changes and I thought, okay, maybe one last time. I wanna try it out for a longer period of time and see if I can make it or not.\u003c/p\u003e\n\u003cp\u003eAfter (re)starting my days with evernote, they soon released a new UI and the classic black sidebar white 3 column were no more. I personally did not like the new glassy look. I at least hoped they’d allow us to choose. They did, but not between the glassy and old one. You can choose between light and dark mode and thats about it. At least I could not find the old one!\u003c/p\u003e\n\u003cp\u003eI really liked this UI.\n\u003cimg\n  src=\"https://store-images.s-microsoft.com/image/apps.34390.9007199266246247.98c8221f-8cff-4552-a6dc-72ec835527f0.6668eaf8-4d03-48a2-94b0-79ae4d2739bb\"\n  alt=\"Evernote\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eBesides that, the space between the tasks themselves, the limited fonts, adding AI to do cleanup… why? Design is subjective, one can say they liked the design, and sure. But this article is about my own experience.\u003c/p\u003e\n\u003cp\u003eHowever, the new design wasn’t so poor though. I can make do. On March 2nd, 2024 I recevied a new notification that says new update available. I did. I had to restart my evernote and … it took around 12-15 seconds to start.\u003c/p\u003e\n\u003cp\u003eIt was horribly slow, even on the same notebook, if I clicked one note and then clicked another for editing, it would take a long time to render and then open in editing mode. I don’t have the best computer in the world, but still running a macbook with m1. That can run other stuff well.\u003c/p\u003e\n\u003cp\u003eAfter trying to troubleshoot for sometime, I finally tried to open other note apps (apple note and bear) and decided to move on.\nI’ll be working ( going back ) to \u003ca href=\"https://bear.app/\"\u003ebear\u003c/a\u003e. They are a small team, who built an amazing app. Very beautiful, simple and works.\u003c/p\u003e\n\u003cp\u003eSo, since 2017 till now, tried my best to keep up with evernote and go back when I could, in the end, the bear killed the elephant.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"https://bear.app/images/website-icons/card.jpg\"\n  alt=\"Bear.app\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eThis was my experience, I hope and pray other people are having better experience. And I hope, the evernote team would remember about simplicity.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/saying-goodbye-to-evernote-finally/",
      "date_published": "2036-02-09T352:22:00+01:00",
      "date_modified": "2036-02-09T352:22:00+01:00",
      "author": {
        "name": "Aryan Ahmed",
        "url": "http://localhost:1313/"
      }
    }
    
  ]
}